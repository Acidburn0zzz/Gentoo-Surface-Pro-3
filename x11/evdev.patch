reverted:
--- src/evdev.c.orig	2015-07-14 19:56:24.558311115 -0500
+++ src/evdev.c	2015-07-14 22:46:53.304540397 -0500
@@ -100,7 +100,7 @@
 /* Any of those triggers a proximity event */
 static int proximity_bits[] = {
         BTN_TOOL_PEN,
+//        BTN_TOOL_RUBBER,
-        BTN_TOOL_RUBBER,
         BTN_TOOL_BRUSH,
         BTN_TOOL_PENCIL,
         BTN_TOOL_AIRBRUSH,
@@ -121,7 +121,7 @@
 static void EvdevInitAxesLabels(EvdevPtr pEvdev, int mode, int natoms, Atom *atoms);
 static void EvdevInitOneAxisLabel(EvdevPtr pEvdev, int mapped_axis,
                                   const char **labels, int label_idx, Atom *atoms);
+static void EvdevInitButtonLabels(InputInfoPtr pInfo, EvdevPtr pEvdev, int natoms, Atom *atoms);
-static void EvdevInitButtonLabels(EvdevPtr pEvdev, int natoms, Atom *atoms);
 static void EvdevInitProperty(DeviceIntPtr dev);
 static int EvdevSetProperty(DeviceIntPtr dev, Atom atom,
                             XIPropertyValuePtr val, BOOL checkonly);
@@ -604,7 +604,7 @@
     int value;
     EvdevPtr pEvdev = pInfo->private;

+    button = EvdevUtilButtonEventToButtonNumber(pInfo, pEvdev, ev->code);
-    button = EvdevUtilButtonEventToButtonNumber(pEvdev, ev->code);

     /* Get the signed value, earlier kernels had this as unsigned */
     value = ev->value;
@@ -839,7 +839,7 @@
     value = ev->value;

     /* don't repeat mouse buttons */
+    if (ev->code >= BTN_MISC && ev->code < KEY_OK)
-    if (ev->code >= BTN_MOUSE && ev->code < KEY_OK)
         if (value == 2)
             return;

@@ -847,6 +847,10 @@
     {
         if (ev->code == proximity_bits[i])
         {
+            if( libevdev_get_id_vendor(pEvdev->dev) == 0x1b96 ) {
+               xf86IDrvMsg(pInfo, X_WARNING, "Discarding code %x\n", ev->code);
+            }
+
             EvdevProcessProximityEvent(pInfo, ev);
             return;
         }
@@ -1760,7 +1764,7 @@
     pEvdev = pInfo->private;

     labels = malloc(pEvdev->num_buttons * sizeof(Atom));
+    EvdevInitButtonLabels(pInfo, pEvdev, pEvdev->num_buttons, labels);
-    EvdevInitButtonLabels(pEvdev, pEvdev->num_buttons, labels);

     if (!InitButtonClassDeviceStruct(device, pEvdev->num_buttons, labels,
                                      pEvdev->btnmap))
@@ -2130,6 +2134,7 @@
 {
     int i, has_rel_axes, has_abs_axes, has_keys, num_buttons, has_scroll;
     int has_lmr; /* left middle right */
+    int has_stylus;
     int has_mt; /* multitouch */
     int ignore_abs = 0, ignore_rel = 0;
     EvdevPtr pEvdev = pInfo->private;
@@ -2165,16 +2170,17 @@
     has_keys = FALSE;
     has_scroll = FALSE;
     has_lmr = FALSE;
+    has_stylus = FALSE;
     has_mt = FALSE;
     num_buttons = 0;

     /* count all buttons */
+    for (i = BTN_MISC; i < KEY_OK; i++)
-    for (i = BTN_MISC; i < BTN_JOYSTICK; i++)
     {
         int mapping = 0;
         if (libevdev_has_event_code(pEvdev->dev, EV_KEY, i))
         {
+            mapping = EvdevUtilButtonEventToButtonNumber(pInfo, pEvdev, i);
-            mapping = EvdevUtilButtonEventToButtonNumber(pEvdev, i);
             if (mapping > num_buttons)
                 num_buttons = mapping;
         }
@@ -2184,6 +2190,19 @@
               libevdev_has_event_code(pEvdev->dev, EV_KEY, BTN_MIDDLE) ||
               libevdev_has_event_code(pEvdev->dev, EV_KEY, BTN_RIGHT);

+    // Alternate Stylus buttons
+    has_stylus = libevdev_has_event_code(pEvdev->dev, EV_KEY, BTN_TOUCH) ||
+              libevdev_has_event_code(pEvdev->dev, EV_KEY, BTN_STYLUS) ||
+              libevdev_has_event_code(pEvdev->dev, EV_KEY, BTN_STYLUS2) ||
+              libevdev_has_event_code(pEvdev->dev, EV_KEY, BTN_TOOL_PEN) ||
+              libevdev_has_event_code(pEvdev->dev, EV_KEY, BTN_TOOL_RUBBER);
+
+    has_lmr |= has_stylus;
+
+    if ( has_stylus ) {
+        xf86IDrvMsg(pInfo, X_PROBED, "Found tablet stylus buttons\n");
+    }
+
     if (num_buttons)
     {
         pEvdev->flags |= EVDEV_BUTTON_EVENTS;
@@ -2728,8 +2747,12 @@
  * returns 0 on non-button event.
  */
 unsigned int
+EvdevUtilButtonEventToButtonNumber(InputInfoPtr pInfo, EvdevPtr pEvdev, int code)
-EvdevUtilButtonEventToButtonNumber(EvdevPtr pEvdev, int code)
 {
+    if( libevdev_get_id_vendor(pEvdev->dev) == 0x1b96 ) {
+       xf86IDrvMsg(pInfo, X_WARNING, "Button event code %x.\n",code);
+    }
+
     switch (code)
     {
         /* Mouse buttons */
@@ -2750,8 +2773,15 @@

         /* Tablet stylus buttons */
         case BTN_TOUCH ... BTN_STYLUS2:
+            xf86IDrvMsg(pInfo, X_WARNING, "Button event code matched - old code\n");
             return 1 + code - BTN_TOUCH;

+        /* Alternate Tablet stylus buttons */
+	case BTN_TOOL_PEN:
+        case BTN_TOOL_RUBBER:
+             xf86IDrvMsg(pInfo, X_WARNING, "Button event code matched\n");
+	     return 3;
+
         /* The rest */
         default:
             /* Ignore */
@@ -2789,7 +2819,7 @@
         EvdevInitOneAxisLabel(pEvdev, pEvdev->abs_axis_map[axis], abs_labels, axis, atoms);
 }

+static void EvdevInitButtonLabels(InputInfoPtr pInfo, EvdevPtr pEvdev, int natoms, Atom *atoms)
-static void EvdevInitButtonLabels(EvdevPtr pEvdev, int natoms, Atom *atoms)
 {
     Atom atom;
     int button, bmap;
@@ -2799,7 +2829,7 @@
     for (button = 0; button < natoms; button++)
         atoms[button] = atom;

+    for (button = BTN_MISC; button < KEY_OK; button++)
-    for (button = BTN_MISC; button < BTN_JOYSTICK; button++)
     {
         if (libevdev_has_event_code(pEvdev->dev, EV_KEY, button))
         {
@@ -2814,7 +2844,7 @@
                 continue;

             /* Props are 0-indexed, button numbers start with 1 */
+            bmap = EvdevUtilButtonEventToButtonNumber(pInfo, pEvdev, button) - 1;
-            bmap = EvdevUtilButtonEventToButtonNumber(pEvdev, button) - 1;
             atoms[bmap] = atom;
         }
     }
@@ -2950,7 +2980,7 @@
         if ((pEvdev->num_buttons > 0) && (prop_btn_label = XIGetKnownProperty(BTN_LABEL_PROP)))
         {
             Atom atoms[EVDEV_MAXBUTTONS];
+            EvdevInitButtonLabels(pInfo, pEvdev, EVDEV_MAXBUTTONS, atoms);
-            EvdevInitButtonLabels(pEvdev, EVDEV_MAXBUTTONS, atoms);
             XIChangeDeviceProperty(dev, prop_btn_label, XA_ATOM, 32,
                                    PropModeReplace, pEvdev->num_buttons, atoms, FALSE);
             XISetDevicePropertyDeletable(dev, prop_btn_label, FALSE);
reverted:
--- src/evdev.h.orig	2015-07-14 22:54:30.761594882 -0500
+++ src/evdev.h	2015-07-14 22:54:41.782657555 -0500
@@ -267,7 +267,7 @@
 void EvdevQueueButtonClicks(InputInfoPtr pInfo, int button, int count);
 void EvdevPostRelativeMotionEvents(InputInfoPtr pInfo);
 void EvdevPostAbsoluteMotionEvents(InputInfoPtr pInfo);
+unsigned int EvdevUtilButtonEventToButtonNumber(InputInfoPtr pInfo, EvdevPtr pEvdev, int code);
-unsigned int EvdevUtilButtonEventToButtonNumber(EvdevPtr pEvdev, int code);

 /* Middle Button emulation */
 int  EvdevMBEmuTimer(InputInfoPtr);
